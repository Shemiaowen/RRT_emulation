load("./cohort_analysis.Rdata")
source("./src/dependencies.R")
source("./src/functions.R")
1*2
1*2
install.packages("mas")
library("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
?mean()
library("ggplot2")
library("survival")
library("survminer")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("survival")
install.packages("survminer")
install.packages("survminer")
library("survminer")
library("survminer")
install.packages("survminer")
?boxplot
ToothGrowth
boxplot(len ~ dose, data = ToothGrowth)
getwd()
ls()
rm(list=ls())
a<-c("1","2","3")
b<-c("a","b","c")
c<-c("19","27","38")
data=data.frame()
rm(list = 1s())
setwd(C:\Users\shemi\Nutstore\1\我的坚果云\讲课)
setwd(C:\\Users\\shemi\\Nutstore\\1\\我的坚果云\\讲课)
cohort <-
cohort %>%
mutate(female = case_when(gender == 'M' ~ 0,
gender == 'F' ~ 1),
medicare_medicaid = case_when(insurance == 'Medicaid' | insurance == 'Medicare' ~ 1,
insurance == 'Other' ~ 0)) %>%
install.packages("installr")
require(installr)
updateR()
install.packages("installr")
install.packages("installr")
require(installr)
updateR()
version
install.packages("installr")
require(installr)
update()
update()
install.packages("SuperLearner")
install.packages("remotes")
remotes::install_github("ecpolley/SuperLearner")
setwd("D:/code")
setwd("D:/RRT_emulation_code/aki")
truncate <- read.csv("truncate.csv")
install.packages("dplyr")
library(dplyr)
truncate<-truncate%>% arrange(desc(id), hr)
truncate$mortality_90 <- as.factor(truncate$mortality_90)
truncate$initiation <- as.factor(truncate$initiation)
truncate$mortality_90 <- as.factor(truncate$mortality_90)
truncate$initiation <- as.factor(truncate$initiation)
View(truncate)
truncate$crrt <- as.factor(truncate$crrt)
ROC<-survivalROC(Stime=data$original_survive_days,
status=data$mortality_90,
marker=data$charlson,
predict.time=90,
method="KM")
install.packages("survivalROC")
library(survivalROC)
data <- truncate[truncate$reset.hour == 1, ]
ROC<-survivalROC(Stime=data$original_survive_days,
status=data$mortality_90,
marker=data$charlson,
predict.time=90,
method="KM")
cutoff<-ROC$cut.values[which.max(ROC$TP-ROC$FP)]
cutoff
plot(ROC$FP,
ROC$TP,
type="l",
xlim=c(0,1),
ylim=c(0,1),
xlab=paste("FP","\n","AUC=",round(ROC$AUC,3)),
ylab="TP",
main="90-day survival ROC",col="red")+
abline(0,1)+
legend("bottomright",c("charlson"),col="red",lty=c(1,1))
data$new_charlson<-ifelse(data$charlson>10,"high","low")
value_distribution <- table(data$new_charlson)
print(value_distribution)
surv_object <- with(data, Surv(original_survive_days, mortality_90 == 1))
install.packages("survminer")
library(survminer)
surv_object <- with(data, Surv(original_survive_days, mortality_90 == 1))
install.packages("survival")
install.packages("survival")
library(survival)
surv_object <- with(data, Surv(original_survive_days, mortality_90 == 1))
cutoff_cox<-coxph(surv_object ~ new_charlson,data=data,weights = weights,robust=T)
summary(cutoff_cox)
cutoff_cox.strata <- coxph(surv_object ~ strata(new_charlson),data = data,weights = weights,robust=T)
summary(cutoff_cox.strata)
cutoff_cox.strata <- coxph(surv_object ~ strata(new_charlson),data = data,weights = weights,robust=T)
summary(cutoff_cox.strata)
cox_model <- survfit(cutoff_cox.strata, data = data)
end_time <- 90
summary(cox_model,times=end_time)
rm(list = ls())
truncate <- read.csv("truncate.csv")
View(truncate)
truncate<-truncate%>% arrange(desc(id), hr)
data <- truncate[truncate$reset.hour == 1, ]
View(data)
ROC<-survivalROC(Stime=data$original_survive_days,  #生存时间
status=data$mortality_90,          #生存状态
marker=data$sofa,                  #需要分析的变量
predict.time=90,                   #预测时间，90d
method="KM")
cutoff<-ROC$cut.values[which.max(ROC$TP-ROC$FP)]
cutoff
ROC<-survivalROC(Stime=truncate$original_survive_days,  #生存时间
status=truncate$mortality_90,          #生存状态
marker=truncate$sofa,                  #需要分析的变量
predict.time=90,                   #预测时间，90d
method="KM")
cutoff<-ROC$cut.values[which.max(ROC$TP-ROC$FP)]
cutoff
ROC<-survivalROC(Stime=truncate$survive_days,  #生存时间
status=truncate$mortality_90,          #生存状态
marker=truncate$sofa,                  #需要分析的变量
predict.time=90,                   #预测时间，90d
method="KM")                       #使用生存分析KM计算
cutoff<-ROC$cut.values[which.max(ROC$TP-ROC$FP)]
cutoff
ROC<-survivalROC(Stime=data$survive_days,  #生存时间
status=data$mortality_90,          #生存状态
marker=data$sofa,                  #需要分析的变量
predict.time=90,                   #预测时间，90d
method="KM")                       #使用生存分析KM计算
cutoff<-ROC$cut.values[which.max(ROC$TP-ROC$FP)]
cutoff
ROC<-survivalROC(Stime=data$survive_days,
status=data$mortality_90,
marker=data$charlson,
predict.time=90,
method="KM")
cutoff<-ROC$cut.values[which.max(ROC$TP-ROC$FP)]
cutoff
ROC<-survivalROC(Stime=truncate$survive_days,
status=truncate$mortality_90,
marker=truncate$charlson,
predict.time=90,
method="KM")
cutoff<-ROC$cut.values[which.max(ROC$TP-ROC$FP)]
cutoff
rm(list = ls())
truncate <- read.csv("truncate.csv")
truncate<-truncate%>% arrange(desc(id), hr)
truncate$crrt <- as.factor(truncate$crrt)
data <- truncate[truncate$reset.hour == 1, ]
ROC<-survivalROC(Stime=truncate$survive_days,
status=truncate$mortality_90,
marker=truncate$charlson,
predict.time=90,
method="KM")
cutoff<-ROC$cut.values[which.max(ROC$TP-ROC$FP)]
cutoff
ROC<-survivalROC(Stime=data$survive_days,
status=data$mortality_90,
marker=data$charlson,
predict.time=90,
method="KM")
cutoff<-ROC$cut.values[which.max(ROC$TP-ROC$FP)]
cutoff
plot(ROC$FP,
ROC$TP,
type="l",
xlim=c(0,1),
ylim=c(0,1),
xlab=paste("FP","\n","AUC=",round(ROC$AUC,3)),
ylab="TP",
main="90-day survival ROC",col="red")+
abline(0,1)+
legend("bottomright",c("charlson"),col="red",lty=c(1,1))
data$mortality_90 <- as.numeric(data$mortality_90)
plot(ROC$FP,
ROC$TP,
type="l",
xlim=c(0,1),
ylim=c(0,1),
xlab=paste("FP","\n","AUC=",round(ROC$AUC,3)),
ylab="TP",
main="90-day survival ROC",col="red")+
abline(0,1)+
legend("bottomright",c("charlson"),col="red",lty=c(1,1))
data$new_charlson<-ifelse(data$charlson>7,"high","low")
value_distribution <- table(data$new_charlson)
print(value_distribution)
View(data)
data$mortality_90 <- as.factor(data$mortality_90)
surv_object <- with(data, Surv(survive_days, mortality_90 == 1))
cutoff_cox<-coxph(surv_object ~ new_charlson,data=data,weights = weights,robust=T)
summary(cutoff_cox)
cutoff_cox.strata <- coxph(surv_object ~ strata(new_charlson),data = data,weights = weights,robust=T)
summary(cutoff_cox.strata)
cox_model <- survfit(cutoff_cox.strata, data = data)
end_time <- 90
summary(cox_model,times=end_time)
ggsurvplot(cox_model,
data = data,
pval = "Hazard ratio: 0.646, 95% CI 0.586-0.712, p = 0.001",
censor = FALSE,
risk.table = FALSE,
title = "Survival Curves by charlson Group",
xlab = "Time",
ylab = "Survival Probability")
rm(list = ls())
truncate <- read.csv("truncate.csv")
truncate<-truncate%>% arrange(desc(id), hr)
data <- truncate[truncate$reset.hour == 1, ]
data$mortality_90 <- as.factor(data$mortality_90)
ROC<-survivalROC(Stime=data$survive_days,
status=data$mortality_90,
marker=data$charlson,
predict.time=90,
method="KM")
cutoff<-ROC$cut.values[which.max(ROC$TP-ROC$FP)]
cutoff
plot(ROC$FP,
ROC$TP,
type="l",
xlim=c(0,1),
ylim=c(0,1),
xlab=paste("FP","\n","AUC=",round(ROC$AUC,3)),
ylab="TP",
main="90-day survival ROC",col="red")+
abline(0,1)+
legend("bottomright",c("charlson"),col="red",lty=c(1,1))
data$new_charlson<-ifelse(data$charlson>8,"high","low")
value_distribution <- table(data$new_charlson)
print(value_distribution)
surv_object <- with(data, Surv(survive_days, mortality_90 == 1))
cutoff_cox<-coxph(surv_object ~ new_charlson,data=data,weights = weights,robust=T)
summary(cutoff_cox)
cutoff_cox.strata <- coxph(surv_object ~ strata(new_charlson),data = data,weights = weights,robust=T)
summary(cutoff_cox.strata)
cox_model <- survfit(cutoff_cox.strata, data = data)
end_time <- 90
summary(cox_model,times=end_time)
ggsurvplot(cox_model,
data = data,
pval = "Hazard ratio: 0.613, 95% CI 0.555-0.677, p < 0.001",
censor = FALSE,
risk.table = FALSE,
title = "Survival Curves by charlson Group",
xlab = "Time",
ylab = "Survival Probability")
setwd("C:/Users/shemi/Nutstore/1/我的坚果云/rrt_emulation/CRRT paper 修改版/code_final")
cox_model <- survfit(cutoff_cox.strata, data = data)
end_time <- 90
end_time <- 90
summary(cox_model,times=end_time)
ggsurvplot(cox_model,
data = data,
pval = "Hazard ratio: 0.613, 95% CI 0.555-0.677, p < 0.001",
censor = FALSE,
risk.table = FALSE,
title = "Survival Curves by charlson Group",
xlab = "Time",
ylab = "Survival Probability")
rm(list = ls())
truncate <- read.csv("truncate.csv")
setwd("C:/Users/shemi/Nutstore/1/我的坚果云/rrt_emulation/CRRT paper 修改版R（初版）/aki")
truncate <- read.csv("truncate.csv")
setwd("D:/RRT_emulation_code/aki")
truncate <- read.csv("truncate.csv")
truncate<-truncate%>% arrange(desc(id), hr)
View(truncate)
truncate$original_survive_days[which(truncate$original_survive_days>90)]=90
truncate$original_survive_days[which(is.na(truncate$original_survive_days))]=90
data <- truncate[truncate$reset.hour == 1, ]
data$mortality_90 <- as.factor(data$mortality_90)
ROC<-survivalROC(Stime=data$original_survive_days,
status=data$mortality_90,
marker=data$charlson,
predict.time=90,
method="KM")
cutoff<-ROC$cut.values[which.max(ROC$TP-ROC$FP)]
cutoff
plot(ROC$FP,
ROC$TP,
type="l",
xlim=c(0,1),
ylim=c(0,1),
xlab=paste("FP","\n","AUC=",round(ROC$AUC,3)),
ylab="TP",
main="90-day survival ROC",col="red")+
abline(0,1)+
legend("bottomright",c("charlson"),col="red",lty=c(1,1))
data$new_charlson<-ifelse(data$charlson>8,"high","low")
value_distribution <- table(data$new_charlson)
print(value_distribution)
surv_object <- with(data, Surv(original_survive_days, mortality_90 == 1))
cutoff_cox<-coxph(surv_object ~ new_charlson,data=data,weights = weights,robust=T)
summary(cutoff_cox)
cutoff_cox.strata <- coxph(surv_object ~ strata(new_charlson),data = data,weights = weights,robust=T)
summary(cutoff_cox.strata)
cox_model <- survfit(cutoff_cox.strata, data = data)
end_time <- 90
summary(cox_model,times=end_time)
ggsurvplot(cox_model,
data = data,
pval = "Hazard ratio: 0.613, 95% CI 0.555-0.677, p < 0.001",
censor = FALSE,
risk.table = FALSE,
title = "Survival Curves by charlson Group",
xlab = "Time",
ylab = "Survival Probability")
setwd("C:/Users/shemi/Nutstore/1/我的坚果云/rrt_emulation/CRRT paper 修改版/code_final")
